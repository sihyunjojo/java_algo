feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 수정
Design: CSS 등 사용자 UI   디자인 변경
style: 코드 스타일 수정
refactor: 코드 구조 개선
test: 테스트 추가 또는 수정
chore: 기타 변경 사항
Rename: 파일 혹은 폴더명을 수정하는 경우
Remove: 사용하지 않는 파일 혹은 폴더를 삭제하는 경우
* Add : 코드나 테스트, 예제, 문서등의 추가 생성이 있는경우
* Improve    : 향상이 있는 경우. 호환성, 검증 기능, 접근성 등이 될수 있습니다.
* Implement    : 코드가 추가된 정도보다 더 주목할만한 구현체를 완성시켰을 때
* Move    : 코드의 이동이 있는경우
* Updated    : 계정이나 버전 업데이트가 있을 때 사용. 주로 코드보다는 문서나, 리소스, 라이브러리등에 사용합니다.
* Comment    : 필요한 주석 추가 및 변경

- 커밋 메시지를 의미 있게 작성한다

1. 제목과 본문을 구분한다.
커밋 메시지는 제목과 본문으로 구분하는 것이 좋아요. 제목은 변경 사항의 요약을, 본문은 변경 사항의 세부 내용을 설명합니다.
2. 제목은 50자 이내로 작성한다. 제목은 50자 이내로 작성하는 것이 좋아요. 제목이 너무 길면, 한눈에 파악하기 어려워집니다.
3. 제목은 명령문으로 작성한다.
제목은 명령문으로 작성하는 것이 좋아요. 명령문으로 작성하면, 변경 사항을 명확하게 표현할 수 있습니다.
4. 본문은 72자 이내로 작성한다.
본문은 72자 이내로 작성하는 것이 좋아요. 본문이 너무 길면, 읽기가 어려워집니다.
5. 커밋 유형을 명시한다.
커밋 메시지에는 커밋 유형을 명시하는 것이 좋아요. 커밋 유형을 명시하면, 변경 사항의 종류를 쉽게 파악할 수 있습니다.
￼
 커밋 유형 커밋 메시지에는 커밋 유형을 명시하는 것이 좋아요. 커밋 유형을 명시하면, 변경 사항의 종류를 쉽게 파악할 수 있습니다. 일반적으로 사용되는 커밋 유형은 다음과 같습니다.

예시 다음은 좋은 커밋 메시지의 예시입니다.
feat: 새 로그인 페이지 추가 이메일과 비밀번호 인증을 지원하는 새 로그인 페이지를 추가했습니다.

이 커밋 메시지는 다음과 같은 특징을 가지고 있습니다. 명확하고 간결하다. 변경 사항을 정확하게 요약한다. 커밋 유형을 명시한다. 결론 좋은 커밋 메시지를 작성하면, 프로젝트의 변경 사항을 쉽게 이해하고 추적할 수 있어요. 따라서 협업 효율을 높이기 위해서는 좋은 커밋 메시지를 작성하는 것이 중요합니다.